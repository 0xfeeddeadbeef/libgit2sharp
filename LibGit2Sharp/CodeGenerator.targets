<?xml version="1.0" encoding="utf-8"?>
<Project InitialTargets="GenerateCodeFirst">
  <PropertyGroup>
    <CodeGenerationOutputPath>$(MSBuildProjectDirectory)\..\bin\CodeGeneration\$(CodeGeneratorConfiguration)\netstandard1.5\</CodeGenerationOutputPath>
  </PropertyGroup>

  <ItemGroup>
    <GeneratorAssemblySearchPaths Include="$(CodeGenerationOutputPath)">
      <Visible>false</Visible>
    </GeneratorAssemblySearchPaths>
  </ItemGroup>
  <!-- Related to https://github.com/dotnet/sdk/issues/939, this carefully written ProjectReference
       allows MSBuild to get the build order right without given nuget grief at the command line.
       Sadly, it still causes failures when run in VS or Travis CI: https://travis-ci.org/libgit2/libgit2sharp/jobs/220381005#L788
       So instead, we control build ordering in VS via a project dependency expressed in the SLN file,
       and a preliminary build of the project referenced below in Travis and AppVeyor.
  <ItemGroup>
    <ProjectReference Include="..\CodeGeneration\CodeGeneration.csproj">
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
      <UndefineProperties>TargetFramework</UndefineProperties>
      <Properties>Configuration=$(CodeGeneratorConfiguration);Platform=AnyCPU</Properties>
    </ProjectReference>
  </ItemGroup>
  -->

  <Target Name="GenerateCodeFirst">
    <PropertyGroup>
      <CoreCompileDependsOn>$(CoreCompileDependsOn);GenerateNativeDllNameCs;GenerateUniqueIdentifierCs</CoreCompileDependsOn>
      <PrepareResourceNamesDependsOn>GenerateCommitIdVersion;$(PrepareResourceNamesDependsOn)</PrepareResourceNamesDependsOn>
      <NativeDllNamePath>$(IntermediateOutputPath)NativeDllName.cs</NativeDllNamePath>
      <UniqueIdentifierPath>$(IntermediateOutputPath)UniqueIdentifier.cs</UniqueIdentifierPath>
      <CommitIdVersionPath>$(IntermediateOutputPath)libgit2sharp_hash.txt</CommitIdVersionPath>
    </PropertyGroup>
  </Target>

  <Target Name="GenerateNativeDllNameCs">
    <ReadLinesFromFile File="@(EmbeddedResource)"
                               Condition=" '%(Filename)%(Extension)' == 'libgit2_filename.txt' ">
      <Output TaskParameter="Lines" PropertyName="libgit2FileName" />
    </ReadLinesFromFile>
    <PropertyGroup>
      <NativeDllNameSourceLines>
namespace LibGit2Sharp.Core
{
  internal static class NativeDllName
  {
    public const string Name = "$(libgit2FileName)"%3b
  }
}
      </NativeDllNameSourceLines>
    </PropertyGroup>
    <WriteLinesToFile File="$(NativeDllNamePath)"
                      Lines="$(NativeDllNameSourceLines)"
                      Overwrite="true" />
    <ItemGroup>
      <Compile Include="$(NativeDllNamePath)" />
      <FileWrites Include="$(NativeDllNamePath)" />
    </ItemGroup>
  </Target>

  <!-- This target runs if any of the projects or .cs files for the project have changed since the last time
      the UniqueIdentifier.cs file was generated. -->
  <Target Name="GenerateUniqueIdentifierCs"
           Inputs="$(MSBuildThisFileFullPath);$(MSBuildAllProjects);@(Compile)"
           Outputs="$(UniqueIdentifierPath)">
    <PropertyGroup>
      <UniqueIdSourceLines>
namespace LibGit2Sharp.Core
{
  internal static class UniqueId
  {
    public const string UniqueIdentifier = "$([System.Guid]::NewGuid())"%3b
  }
}
      </UniqueIdSourceLines>
    </PropertyGroup>

    <WriteLinesToFile File="$(UniqueIdentifierPath)"
                      Lines="$(UniqueIdSourceLines)"
                      Overwrite="true" />

    <ItemGroup>
      <Compile Include="$(UniqueIdentifierPath)" />
      <FileWrites Include="$(UniqueIdentifierPath)" />
    </ItemGroup>
  </Target>

  <Target Name="GenerateCommitIdVersion"
          DependsOnTargets="GetBuildVersion">
    <WriteLinesToFile File="$(CommitIdVersionPath)"
                      Lines="$(GitCommitId)"
                      Overwrite="true" />

    <ItemGroup>
      <EmbeddedResource Include="$(CommitIdVersionPath)">
        <LogicalName>$(RootNamespace).libgit2sharp_hash.txt</LogicalName>
      </EmbeddedResource>
    </ItemGroup>
  </Target>
</Project>
