version: '{build}'

os: Visual Studio 2017

branches:
  only:
  - master
  - /^maint.*/
  - /portable.*/

configuration: release

skip_tags: true

nuget:
  disable_publish_on_pr: true

environment:
  coveralls_token:
    secure: ixIsBslo9NheDb5lJknF58EYdgvZ0r3/L0ecRiXjfXmjHBLvoSU6/ZRwaMM+BAlG
  coverity_token:
    secure: nuzUT+HecXGIi3KaPd/1hgFEZJan/j6+oNbPV75JKjk=
  coverity_email:
    secure: eGVilNg1Yuq+Xj+SW8r3WCtjnzhoDV0sNJkma4NRq7A=
  version : 0.24.0
  matrix:
  - xunit_runner: xunit.console.x86.exe
    Arch: 32
    publish_on_success: False
  - xunit_runner: xunit.console.exe
    Arch: 64
    publish_on_success: True

matrix:
  fast_finish: true

install:
- ps: |
    Write-Host "Commit being built = " -NoNewLine
    Write-Host $Env:APPVEYOR_REPO_COMMIT -ForegroundColor "Green"
    Write-Host "Current build version = " -NoNewLine
    Write-Host $Env:VERSION -ForegroundColor "Green"
    Write-Host "Target branch = " -NoNewLine
    Write-Host $Env:APPVEYOR_REPO_BRANCH -ForegroundColor "Green"
    Write-Host "Is a Pull Request = " -NoNewLine
    Write-Host $($Env:APPVEYOR_PULL_REQUEST_NUMBER -ne $null) -ForegroundColor "Green"

    $CommitDate = [DateTime]::Parse($Env:APPVEYOR_REPO_COMMIT_TIMESTAMP)
    $BuildDate = $CommitDate.ToUniversalTime().ToString("yyyyMMddHHmmss")
    Write-Host "Merge commit UTC timestamp = " -NoNewLine
    Write-Host $BuildDate -ForegroundColor "Green"

    $VersionSuffix = ""
    If ($Env:APPVEYOR_REPO_BRANCH -ne "master")
    {
      $VersionSuffix = "-pre$BuildDate"
    }
    $Version = "$($Env:VERSION)$($VersionSuffix)"
    $Env:ASSEMBLY_INFORMATIONAL_VERSION = $Version
    Write-Host "Assembly informational version = " -NoNewLine
    Write-Host $Env:ASSEMBLY_INFORMATIONAL_VERSION -ForegroundColor "Green"

    $Env:SHOULD_RUN_COVERITY_ANALYSIS = $($Env:APPVEYOR_SCHEDULED_BUILD -eq $True)
    Write-Host "Should run Coverity analysis = " -NoNewLine
    Write-Host $Env:SHOULD_RUN_COVERITY_ANALYSIS -ForegroundColor "Green"

    $Env:SHOULD_RUN_COVERALLS = $($Env:APPVEYOR_SCHEDULED_BUILD -eq $True)
    Write-Host "Should run Coveralls = " -NoNewLine
    Write-Host $Env:SHOULD_RUN_COVERALLS -ForegroundColor "Green"

    Write-Host "Should publish on success = " -NoNewLine
    Write-Host $Env:publish_on_success -ForegroundColor "Green"

    If ($Env:SHOULD_RUN_COVERALLS -eq $True)
    {
      nuget install OpenCover -Version 4.6.166 -ExcludeVersion -OutputDirectory .\packages
      nuget install coveralls.net -Version 0.6.0 -ExcludeVersion -OutputDirectory .\packages
    }

    If ($Env:SHOULD_RUN_COVERITY_ANALYSIS -eq $True)
    {
      cinst curl -y
    }

before_build:
- ps: |
    dotnet restore

build_script:
- ps: |
    dotnet msbuild "$Env:APPVEYOR_BUILD_FOLDER\LibGit2Sharp.sln" `
      /verbosity:minimal /fl /flp:verbosity=normal `
      /property:ExtraDefine="LEAKS_IDENTIFYING" `
      /t:build,pack

test_script:
- ps: |
    If ($Env:SHOULD_RUN_COVERALLS -eq $True -and $Env:publish_on_success -eq $True)
    {
      .\packages\OpenCover\tools\OpenCover.Console.exe `
        -register:user `
        "-target:""$Env:userprofile\.nuget\packages\xunit.runner.console\2.0.0\tools\$Env:xunit_runner""" `
        "-targetargs:""$Env:APPVEYOR_BUILD_FOLDER\LibGit2Sharp.Tests\bin\Release\net46\LibGit2Sharp.Tests.dll"" -noshadow" `
        "-filter:+[LibGit2Sharp]* -[LibGit2Sharp.Tests]*" `
        -hideskipped:All `
        -output:opencoverCoverage.xml
    }
    ElseIf ($Env:SHOULD_RUN_COVERITY_ANALYSIS -eq $False)
    {
      & "$Env:userprofile\.nuget\packages\xunit.runner.console\2.0.0\tools\$Env:xunit_runner" `
          "$Env:APPVEYOR_BUILD_FOLDER\LibGit2Sharp.Tests\bin\Release\net46\LibGit2Sharp.Tests.dll" -noshadow
    }

after_test:
- ps: |
    If ($Env:SHOULD_RUN_COVERALLS -eq $True -and $Env:publish_on_success -eq $True)
    {
      Write-Host "Uploading code coverage result..." -ForegroundColor "Green"

      .\packages\coveralls.net\tools\csmacnz.Coveralls.exe `
        --opencover -i opencoverCoverage.xml `
        --repoToken $Env:coveralls_token `
        --useRelativePaths `
        --basePath "$Env:APPVEYOR_BUILD_FOLDER\"`
    }

    If ($Env:SHOULD_RUN_COVERITY_ANALYSIS -eq $True -and $Env:publish_on_success -eq $True)
    {
      7z a "$Env:APPVEYOR_BUILD_FOLDER\$Env:APPVEYOR_PROJECT_NAME.zip" "$Env:APPVEYOR_BUILD_FOLDER\cov-int\"

      # cf. http://stackoverflow.com/a/25045154/335418
      Remove-item alias:curl

      Write-Host "Uploading Coverity analysis result..." -ForegroundColor "Green"

      curl --silent --show-error `
        --output curl-out.txt `
        --form token="$Env:coverity_token" `
        --form email="$Env:coverity_email" `
        --form "file=@$Env:APPVEYOR_BUILD_FOLDER\$Env:APPVEYOR_PROJECT_NAME.zip" `
        --form version="$Env:APPVEYOR_REPO_COMMIT" `
        --form description="CI server scheduled build." `
        https://scan.coverity.com/builds?project=libgit2%2Flibgit2sharp

        cat .\curl-out.txt
    }

artifacts:
- path: '**\bin\**\*.nupkg'
  name: NuGet Package
- path: msbuild.log
  name: Build log

notifications:
- provider: Email
  to:
    - emeric.fermas@gmail.com
  on_build_status_changed: true
